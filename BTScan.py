#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç BTScan.py ‚Äî –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ BLE-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Elkbledom, LEDBLE, MELK –∏ —Ç.–ø.)
–ê–≤—Ç–æ—Ä: Satimaro
–í–µ—Ä—Å–∏—è: 1.0.0

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç BluePy –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Bluetooth Low Energy —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
–í—ã–≤–æ–¥–∏—Ç MAC, RSSI, –∏–º—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.
"""

from bluepy.btle import Scanner, DefaultDelegate, BTLEException
import logging
import sys
import time

# -----------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -----------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(message)s",
    datefmt="%H:%M:%S"
)
_LOGGER = logging.getLogger("BTScan")

# -----------------------------------------------
# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
# -----------------------------------------------
TARGET_NAMES = [
    "ELK-BLE", "ELK-BLEDDM", "LEDBLE", "MELK", "ELK-BULB", "ELK-LAMPL"
]

# -----------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# -----------------------------------------------
class ScanDelegate(DefaultDelegate):
    def __init__(self):
        DefaultDelegate.__init__(self)

    def handleDiscovery(self, dev, isNewDev, isNewData):
        if isNewDev:
            _LOGGER.debug("üîπ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s", dev.addr)
        elif isNewData:
            _LOGGER.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s", dev.addr)


# -----------------------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# -----------------------------------------------
class BluetoothScanner:
    def __init__(self, duration: int = 10):
        self.duration = duration
        self.scanner = Scanner().withDelegate(ScanDelegate())

    def scan(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BLE-—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        _LOGGER.info("üöÄ –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BLE (%s —Å–µ–∫—É–Ω–¥)...", self.duration)
        try:
            devices = self.scanner.scan(self.duration)
        except BTLEException as e:
            _LOGGER.error("–û—à–∏–±–∫–∞ Bluetooth: %s", e)
            sys.exit(1)

        if not devices:
            _LOGGER.warning("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ Bluetooth –≤–∫–ª—é—á—ë–Ω.")
            return

        _LOGGER.info("üì° –ù–∞–π–¥–µ–Ω–æ %d —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", len(devices))
        print("=" * 70)
        print(f"{'MAC-–∞–¥—Ä–µ—Å':<20} {'RSSI (–¥–ë)':<10} {'–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞':<25} {'–¢–∏–ø'}")
        print("=" * 70)

        for dev in devices:
            name = None
            for (_, desc, value) in dev.getScanData():
                if desc.lower() == "complete local name":
                    name = value
                    break

            target_flag = ""
            if name and any(key.lower() in name.lower() for key in TARGET_NAMES):
                target_flag = "‚≠ê"
            elif name is None:
                name = "(–ë–µ–∑ –∏–º–µ–Ω–∏)"

            print(f"{dev.addr:<20} {dev.rssi:<10} {name:<25} {target_flag}")

        print("=" * 70)
        _LOGGER.info("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


# -----------------------------------------------
# –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
# -----------------------------------------------
if __name__ == "__main__":
    try:
        duration = 10
        if len(sys.argv) > 1:
            duration = int(sys.argv[1])

        scanner = BluetoothScanner(duration)
        scanner.scan()

        # –°–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print("\nüí° –°–æ–≤–µ—Ç: —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–ø—É—Å—Ç–∏ —Å–Ω–æ–≤–∞:")
        print("   python3 BTScan.py 15   # –≥–¥–µ 15 ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")

    except KeyboardInterrupt:
        print("\n‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)
    except Exception as e:
        _LOGGER.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        time.sleep(1)
        sys.exit(1)
