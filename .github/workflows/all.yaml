name: Validate, Build & Release (Full Auto)

on:
  push:
    branches: [ main, master ]
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  validate:
    name: Validate Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Hassfest validation
        uses: home-assistant/actions/hassfest@main

      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration

  release:
    name: Build ZIP & Create Release
    needs: [validate]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Sync manifest.json version with tag
        id: sync
        shell: bash
        run: |
          set -euo pipefail
          export TAG_VERSION="${GITHUB_REF_NAME#v}"
          export MANIFEST_PATH="custom_components/elkbledom/manifest.json"
          echo "tag_version=$TAG_VERSION" >> "$GITHUB_OUTPUT"

          echo "Updating $MANIFEST_PATH to version $TAG_VERSION..."
          python - <<'PY'
import json, os
path = os.environ["MANIFEST_PATH"]
ver  = os.environ["TAG_VERSION"]
with open(path, "r", encoding="utf-8") as f:
    data = json.load(f)
data["version"] = ver
with open(path, "w", encoding="utf-8") as f:
    json.dump(data, f, indent=2, ensure_ascii=False)
print(f"manifest.json updated to {ver}")
PY
          echo "✅ manifest.json version updated"

      - name: Re-run Hassfest validation
        uses: home-assistant/actions/hassfest@main

      - name: Re-run HACS validation (non-blocking)
        uses: hacs/action@main
        with:
          category: integration
        continue-on-error: true

      - name: Build ZIP for HACS
        shell: bash
        run: |
          set -euo pipefail
          ZIP="elkbledom-fastlink-v${{ steps.sync.outputs.tag_version }}.zip"
          echo "ZIP_NAME=$ZIP" >> "$GITHUB_ENV"
          test -d custom_components/elkbledom
          cd custom_components
          zip -r "../$ZIP" "elkbledom" -x "**/__pycache__/*" "**/.DS_Store"
          cd ..
          ls -lh "$ZIP"
          echo "✅ Created $ZIP"

      - name: Generate Release Notes
        id: notes
        run: |
          echo "release_name=ELK-BLEDOM FastLink v${{ steps.sync.outputs.tag_version }}" >> $GITHUB_OUTPUT
          echo "release_body=Fast BLE connection, working effects, smoother brightness, and RGB color temperature emulation for Home Assistant." >> $GITHUB_OUTPUT

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.notes.outputs.release_name }}
          body: ${{ steps.notes.outputs.release_body }}
          files: ${{ env.ZIP_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Commit updated manifest.json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: bump manifest.json to v${{ steps.sync.outputs.tag_version }}"
          file_pattern: custom_components/elkbledom/manifest.json
